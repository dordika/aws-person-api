# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: person-api

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

custom:
  personTableName: 'java-person-${self:provider.stage}'

provider:
  name: aws
  runtime: java8
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  iam:
    role:
      statements:
          - Effect: Allow
            Action:
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
            Resource:
              - { "Fn::GetAtt": [ "PersonDynamoDBTable", "Arn" ] }
  environment:
    PERSON_TABLE_NAME: ${self:custom.personTableName}


#Packaging information here
package:
  artifact: 'target/${self:service}-${self:provider.stage}.jar'

functions:
  createPerson:
    handler: com.serverless.CreatePersonHandler
    events:
      - http:
          path: /persons
          method: post

  getPerson:
    handler: com.serverless.GetPersonHandler
    events:
      - http:
          path: /persons/{id}
          method: get

  listPersons:
    handler: com.serverless.ListPersonsHandler
    events:
      - http:
          path: /persons
          method: get

  deletePerson:
    handler: com.serverless.DeletePersonHandler
    events:
      - http:
          path: /persons/{id}
          method: delete


# you can add CloudFormation resource templates here
resources:
  Resources:
    PersonDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.personTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: name
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1